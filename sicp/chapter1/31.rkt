#lang sicp

(#%require rackunit)

; TASK:
;
; Процедуры высших порядков
;
; а. Процедура sum — всего лишь простейшая из обширного множества подобных
; абстракций, которые можно выразить через процедуры высших порядков. Напишите
; аналогичную процедуру под названием product , которая вычисляет произведение
; значений функции в точках на указанном интервале. Покажите, как с помощью
; этой процедуры определить factorial . Кроме того, при помощи product
; вычислите приближенное значение π по формуле
;
;     π     2·4·4·6·6·8···
;     -  =  --------------
;     4     3·3·5·5·7·7···
;
; б. Если Ваша процедура product порождает рекурсивный процесс,
; перепишите ее так, чтобы она порождала итеративный. Если она
; порождает итеративный процесс, перепишите ее так, чтобы она
; порождала рекурсивный.


; SOLUTION:

(define (product term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (* (term a) result))))
  (iter a 1))

; (define (product term a next b)
;    (if (> a b)
;      1
;      (* (term a)
;         (product term (next a) next b))))

(define (factorial x) (product identity 1 inc x))


; π     2·4·4·6·6·8···
; -  =  --------------
; 4     3·3·5·5·7·7···
;
; Представим эту функцию в виде произведений:
;
; π     2 4 4 6 6 8 ···
; -  =  -·-·-·-·-·-·---
; 4     3 3 5 5 7 7 ···
;
; Попробуем понять логику изменений для каждой итерации:
;
; π     2 2+2 4+0 4+2 6+0 8 ···
; -  =  -·---·---·---·---·-·---
; 4     3 3+0 3+2 5+0 5+2 7 ···
;
; Значит мы начинаем с 2/3 и каждый чётный шаг добавляем к числителю
; 2 и к знаменателю 0. Каждый нечётный шаг делаем наоборот.

;(define (pi-approx)
;  (define (pi-next x)
;    (if (even? x)
;      (* x 2)
;      (/ x 2)))
;  (product identity 2/3 pi-next lk))


; HELPERS:

(define (inc n) (+ n 1))

(define (square x) (* x x))

(define (identity x) x)


; TESTS:

(check-equal? (product square 1 inc 3) 36)
(check-equal? (product identity 3 inc 5) 60)
(check-equal? (factorial 5) 120)
