
#lang sicp

(#%require rackunit)

; TASK:
;
; Синус угла
;
; Синус угла (заданного в радианах) можно вычислить, если воспользоваться
; приближением sin x ≈ x при малых x и употребить тригонометрическое тождество
;
; sin(x) = 3sin(x / 3) − 4sin³(x / 3)
; для уменьшения значения аргумента sin . (В этом упражнении мы будем считать,
; что угол «достаточно мал», если он не больше 0.1 радиана.) Эта идея
; используется в следующих процедурах:

(define (cube x) (* x x x))

(define (p x) (- (* 3 x) (* 4 (cube x))))

(define (sine angle)
   (if (not (> (abs angle) 0.1))
          angle
                 (p (sine (/ angle 3.0)))))

; Вопросы:
;
; а. Сколько раз вызывается процедура p при вычислении (sine
; 12.15) ?
;
; б. Каковы порядки роста в терминах количества шагов
; и используемой памяти (как функция a ) для процесса,
; порождаемого процедурой sine при вычислении (sine a) ?


; SOLUTION:

(sine 12.15)

; Итерация 1:
; (if (not (> (abs angle) 0.1))  #f
;     angle
;     (p (sine (/ angle 3.0)))   < попадаем сюда,  #1
;
; (p (sine (/ 12.15 3.0)))
; (p (p (sine (/ 4.05 3.0))))
; (p (p (p (sine (/ 1.35 3.0)))))
; (p (p (p (p (sine (/ 0.45 3.0))))))
; (p (p (p (p (p (sine (/ 0.15 3.0)))))))
; (p (p (p (p (p (p (sine (/ 0.05 3.0))))))))    < здесь вылетаем
; в if-следствие, и возвращается угол 0.05 в процедуру `p` после чего
; начинается свертка рекурсии
;
; а. процедура P вызывается 6 раз
; б. порядок роста операций a/3, т.е. при увеличении входных данных в 3 раза он
; увеличивается на 1 единицу, это линейный (?) O(n)
; память - константа O(1)


; TESTS:

#| (check-equal? (f 5) 25) |#
#| (check-equal? (f-iter 4) 11) |#
#| (check-equal? (f 3) 4) |#
#| (check-equal? (f-iter 1) 1) |#

