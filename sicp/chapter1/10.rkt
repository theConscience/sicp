#lang sicp


; TASK:
; Следующая процедура вычисляет математическую функцию, называемую функцией
; Аккермана.

(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

; Каковы значения следующих выражений?

(A 1 10)
(A 2 4)
(A 3 3)

; Рассмотрим следующие процедуры, где A — процедура, определенная выше:

(define (f n) (A 0 n))
(define (g n) (A 1 n))
(define (h n) (A 2 n))
(define (k n) (* 5 n n))

; Дайте краткие математические определения функций, вычисляемых процедурами f,
; g и h для
; положительных целых значений n. Например, (k n) вычисляет 5n^2



; SOLUTION:

(A 1 10)

; (A (- 1 1) (A 1 (- 10 1)))
; (A 0 (A 1 9))
; (A 0 (A (- 1 1) (A 1 (- 9 1))))
; (A 0 (A 0 (A 1 8)))
; (A 0 (A 0 (A (- 1 1) (A 1 (- 8 1)))))
; (A 0 (A 0 (A 0 (A 1 7))))
; (A 0 (A 0 (A 0 (A 0 (A 1 6)))))
; (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5))))))
; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4)))))))
; ...
; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))
; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))
; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4))))))))
; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8)))))))
; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 16))))))
; (A 0 (A 0 (A 0 (A 0 (A 0 32)))))
; (A 0 (A 0 (A 0 (A 0 64))))
; (A 0 (A 0 (A 0 128)))
; (A 0 (A 0 256))
; (A 0 512)
; 1024   ; -> это 2 ^ 10й степени

(A 2 4)

; (A (- 2 1) (A 2 (- 4 1)))
; (A 1 (A 2 3))
; (A 1 (A (- 2 1) (A 2 (- 3 1))))
; (A 1 (A 1 (A 2 2)))
; (A 1 (A 1 (A 1 (A 2 1))))
; (A 1 (A 1 (A 1 2)))
; (A 1 (A 1 (A (- 1 1) (A 1 (- 2 1)))))
; (A 1 (A 1 (A 0 (A 1 1))))
; (A 1 (A 1 (A 0 2)))

; (A 1 (A 1 4))  ; а такое мы уже умеем считать:
; (A 1 (A 0 (A 0 (A 0 (A 1 1)))))
; (A 1 (A 0 8))
; (A 1 16)  ; -> предположу что это 2 ^ 16й степени
; 65536  ; -> то есть это 2 ^ 2 ^ 4й степени

(A 3 3)

; (A (- 3 1) (A 3 (- 3 1)))
; (A 2 (A 3 2))
; (A 2 (A (- 3 1) (A 3 (- 2 1))))
; (A 2 (A (- 3 1) (A 3 1)))
; (A 2 (A 2 2))
; (A 2 4)  ; а значение этого мы уже знаем
; 65536


(define (f n) (A 0 n))  ; 2 * n
(define (g n) (A 1 n))  ; 2 ^ n
(define (h n) (A 2 n))  ; 2 ^ (2 ^ n)
(define (k n) (* 5 n n))


(define (exp x y)
  (cond
    ((= y 0) 1)
    ((> y 2) (* x (exp x (- y 1))))
    ((= y 2) (* x x))
    (else x)))

(exp 2 2)
; (*2 2)  4
(exp 2 3)
; (* 2 (exp 2 (- 3 1)))
; (* 2 (exp 2 2))
